}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) &
hospData$State == state)
%>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
hospData$Hospital.Name)
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
# print("testing break function")
}
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) &
hospData$State == state)
%>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
hospData$Hospital.Name)
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
(!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) &
hospData$State == state))
%>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
hospData$Hospital.Name)
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
(!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) &
(hospData$State == state)))
%>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
hospData$Hospital.Name)
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
?dplyr::filter
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
best("OH", "heart attack")
ohio <- best("OH", "heart attack")
View(ohio)
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)) %>%
filter(hospData$State == state)
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
ohio <- best("OH", "heart attack")
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
(!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
& hospData$State == state))
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
ohio <- best("OH", "heart attack")
View(ohio)
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
(!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
& hospData$State == state)) %>%
arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
ohio <- best("OH", "heart attack")
class(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
(!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
& hospData$State == state)) %>%
arrange(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
ohio <- best("OH", "heart attack")
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
(!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
& hospData$State == state)) %>%
arrange(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
ohio <- best("OH", "heart attack")
View(ohio)
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
(!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
& hospData$State == state)) %>%
arrange(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, desc(Hospital.Name))
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
ohio <- best("OH", "heart attack")
View(ohio)
?dplyr::arrange
#A function to find the best state for heart attack, pneumonia, or heart failure
library(dplyr)
best <- function(state, outcome) {
#read in data from .csv
hospData <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv",
na.strings = c("NA", "Not Available"))
#create vector of valid outcomes
validOutcome <- c("heart attack", "heart failure", "pneumonia")
#see if state is valid
if (!is.element(state, hospData$State)) {
stateError <- paste(state, " is not a valid state. Use two letter
postal code and all caps")
print(stateError)
return(invisible())
}
#see if outcome is valid
if (!is.element(outcome, validOutcome)) {
outcomeError <- paste(outcome, " is not a valid outcome.
Please enter 'heart attack', 'heart failure' or 'pneumonia'")
print(outcomeError)
return(invisible())
}
if(outcome == "heart attack") {
dpSort<- dplyr::filter(hospData,
(!is.na(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
& hospData$State == state)) %>%
arrange(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, Hospital.Name)
#      & (hospData$State == state)))
# %>% arrange(desc(hospData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),
#             hospData$Hospital.Name)
#
# heartAttackByState <- hospData[which(hospData$State == state),]
# heartAttackNoNa <- subset(heartAttackByState,!(is.na(heartAttackByState[,11])))
# dplyr::arrange(heartAttackNoNa, desc())
#
# print(length(heartAttackByState[,2]))
# print(length(heartAttackNoNa[,2]))
# return(heartAttackNoNa[,c(2,7)])
return(dpSort)
}
}
ohio <- best("OH", "heart attack")
View(ohio)
